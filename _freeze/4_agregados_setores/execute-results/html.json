{
  "hash": "b1f92a2b34fb8752a0bf4b12af3d85ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4. Agregados dos Setores Censit√°rios\"\nfrom: markdown+emoji\n---\n\n\n\nt\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nPerhaps the most commonly used datasets from Brazilian censuses are the microdata of individuals and households. Nonetheless, IBGE also makes available some extremely data on population and environmental characteristics aggregated at the census tract level. In this vignette, we show how to use the **censobr** package to  easily access census tract-level data using the `read_tracts()` function.\n\nAt the moment, this function only includes data from the 2010 census.\n\n\n# Data structure\n\nAggregated data at the census tract level are split into different datasets, and some of them are scattered across several files. For the sake of convenience, we have gathered all of the files into 8 different datasets:\n\n- `\"Basico\"`\n- `\"Entorno\"`\n- `\"Domicilio\"`\n- `\"Pessoa\"`\n- `\"Responsavel\"`\n- `\"PessoaRenda\"`\n- `\"DomicilioRenda\"`\n- `\"ResponsavelRenda\"`\n\nAll of the data aggregated at census tracts are organized following the same logic.\n\nIn the cases when there are multiple files in the same dataset, we add a reference to the number of the file as a prefix to the variable name. To illustrate this, let's have a look at the `\"Domicilio\"` dataset. This dataset is based on two separate tables: *Domicilio01* and *Domicilio02*. So the names of the columns in this dataset are organized as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(censobr)\n\ndom <- read_tracts(year = 2010, \n                   dataset = 'Domicilio', \n                   showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nReading data cached locally.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe tzdb package is not installed. Timezones will not be available to Arrow compute functions.\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(dom)[c(1:20,301:320)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"code_tract\"        \"code_weighting\"    \"code_muni\"        \n [4] \"code_state\"        \"abbrev_state\"      \"name_state\"       \n [7] \"code_region\"       \"name_region\"       \"domicilio01_V1005\"\n[10] \"domicilio01_V001\"  \"domicilio01_V002\"  \"domicilio01_V003\" \n[13] \"domicilio01_V004\"  \"domicilio01_V005\"  \"domicilio01_V006\" \n[16] \"domicilio01_V007\"  \"domicilio01_V008\"  \"domicilio01_V009\" \n[19] \"domicilio01_V010\"  \"domicilio01_V011\"  \"domicilio02_V050\" \n[22] \"domicilio02_V051\"  \"domicilio02_V052\"  \"domicilio02_V053\" \n[25] \"domicilio02_V054\"  \"domicilio02_V055\"  \"domicilio02_V056\" \n[28] \"domicilio02_V057\"  \"domicilio02_V058\"  \"domicilio02_V059\" \n[31] \"domicilio02_V060\"  \"domicilio02_V061\"  \"domicilio02_V062\" \n[34] \"domicilio02_V063\"  \"domicilio02_V064\"  \"domicilio02_V065\" \n[37] \"domicilio02_V066\"  \"domicilio02_V067\"  \"domicilio02_V068\" \n[40] \"domicilio02_V069\" \n```\n\n\n:::\n:::\n\n\n\n\n## Dictionary of variables\n\nTo check the meaning of each variable, users can run the `data_dictionary()`, which will open on the browser an `.html` or `.pdf` file with the dictionary of variables in each dataset\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dictionary(year = 2010, dataset = 'tracts')\n```\n:::\n\n\n\n\n\n# Reproducible examples\n\nNow let's use a couple reproducible examples to illustrate how to work with census tract-level data. First, we need to load the libraries we'll be using in this vignette.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(geobr)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\nIn these examples below, example we'll use the city of Belo Horizonte for demonstration purposes. So we can start by downloading the the geometries of the census tracts in the area. First, we need to download the geometries of all census tracts in the state of Minas Gerais (MG), and then keep only the ones in the municipality of Belo Horizonte. We'll also download the municipality borders of BH.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmuni_bh <- geobr::read_municipality(code_muni = 'MG', \n                                    year = 2010, \n                                    showProgress = FALSE) |>\n           filter(name_muni == \"Belo Horizonte\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n\n```{.r .cell-code}\ntracts_sf <- geobr::read_census_tract(code_tract = \"MG\",\n                                      simplified = FALSE,\n                                      year = 2010,\n                                      showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing year/date 2010\n```\n\n\n:::\n\n```{.r .cell-code}\ntracts_sf <- filter(tracts_sf, name_muni == \"Belo Horizonte\")\n\nggplot() + \n  geom_sf(data=tracts_sf, fill = 'gray90', color='gray60') + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](4_agregados_setores_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Example 1: Spatial distribution of income\n\nIn this first example we'll be creating a map of the spatial distribution of average income per capita. We can find the information on the the total number of residents in each census tract in the `\"Basico\"` dataset, variable `\"V002\"`. Meanwhile, the information on income can be found in the `\"DomicilioRenda\"` dataset, variable `\"V003\"`.\n\nUsing the code below, we download the data and calculate the income per capita of all census tracts in Brazil.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download data\ntract_basico <- read_tracts(year = 2010,\n                            dataset = \"Basico\", \n                            showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nReading data cached locally.\n```\n\n\n:::\n\n```{.r .cell-code}\ntract_income <- read_tracts(year = 2010,\n                            dataset = \"DomicilioRenda\", \n                            showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nReading data cached locally.\n```\n\n\n:::\n\n```{.r .cell-code}\n# select columns\ntract_basico <- tract_basico |> select('code_tract','V002')\ntract_income <- tract_income |> select('code_tract','V003')\n\n# merge\ntracts_df <- left_join(tract_basico, tract_income) |> collect()\n\n# calculate income per capita\ntracts_df <- tracts_df |> mutate(income_pc = V003 / V002)\nhead(tracts_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        code_tract  V002   V003 income_pc\n            <char> <num>  <num>     <num>\n1: 120001305000001   957 601805  628.8454\n2: 120001305000002  1203 385033  320.0607\n3: 120001305000003  1700 531794  312.8200\n4: 120001305000004   182  58853  323.3681\n5: 120001305000005   305 112979  370.4230\n6: 120001305000006   483 263538  545.6273\n```\n\n\n:::\n:::\n\n\n\n\nFinally, we can merge the spatial data with our per capita income estimates and map the results.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbh_tracts <- left_join(tracts_sf, tracts_df, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = income_pc), color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(subtitle = 'Avgerage income per capita.\\nBelo Horizonte, 2010') +\n  scale_fill_viridis_c(name = \"Income per\\ncapita (R$)\",\n                       labels = scales::number_format(),\n                       option = 'cividis',\n                       breaks = c(0, 500, 1e3, 5e3, 1e4, 2e4),\n                       trans = \"pseudo_log\", na.value = \"gray90\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](4_agregados_setores_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Example 2: \n\nIn this second example, we are going to map the proportion of households with the presence of trees in their surroundings. To do this, we need to download the `\"Entorno\"` dataset and sum the variables `entorno01_V044 + entorno01_V046 + entorno01_V048`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download data\ntract_entorno <- read_tracts(year = 2010,\n                             dataset = \"Entorno\", \n                             showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nReading data cached locally.\n```\n\n\n:::\n\n```{.r .cell-code}\n# filter observations and calculate indicator\ndf_trees <- tract_entorno |>\n                  filter(code_tract %in% tracts_sf$code_tract) |>\n                  mutate(total_households = entorno01_V001,\n                         trees = entorno01_V044 + entorno01_V046 + entorno01_V048,\n                         trees_prop = trees / total_households) |>\n                  select(code_tract, total_households, trees, trees_prop) |>\n                  collect()\n\nhead(df_trees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        code_tract total_households trees trees_prop\n            <char>            <num> <num>      <num>\n1: 310620005620001              212   212  1.0000000\n2: 310620005620002              189   189  1.0000000\n3: 310620005620003              295   291  0.9864407\n4: 310620005620004              226   200  0.8849558\n5: 310620005620005              295   295  1.0000000\n6: 310620005620006              301   299  0.9933555\n```\n\n\n:::\n:::\n\n\n\n\nNow we can merge the spatial data with our indicator and see how the presence of trees in the surroundings of households varies spatially.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbh_tracts <- left_join(tracts_sf, df_trees, by = 'code_tract')\n\nggplot() +\n  geom_sf(data = bh_tracts, aes(fill = trees_prop), color=NA) +\n  geom_sf(data = muni_bh, color='gray10', fill=NA) +\n  labs(subtitle = 'Share of households with trees in their surroundings.\\nBelo Horizonte, 2010') +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Share of\\nhouseholds', \n                       na.value = \"gray90\",\n                       labels = scales::percent) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](4_agregados_setores_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "4_agregados_setores_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}